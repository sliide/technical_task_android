apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'androidx.navigation.safeargs.kotlin'

def appVersionCode = getVersionCode()
def appVersionName = getVersionName()

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "eu.andreihaiu.task"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode appVersionCode
        versionName appVersionName
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            shrinkResources false
            minifyEnabled false
            debuggable true
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    // Kotlin Standard Library
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Support Library
    implementation "androidx.core:core-ktx:$kotlinCoreVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.fragment:fragment-ktx:$supportFragmentVersion"
    implementation "androidx.activity:activity-ktx:$supportActivityVersion"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Google Material
    implementation "com.google.android.material:material:$materialVersion"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$navVersion"
    implementation "androidx.navigation:navigation-compose:$navComposeVersion"

    // Koin Dependency Injection
    implementation "io.insert-koin:koin-core:$koinVersion"
    implementation "io.insert-koin:koin-core-ext:$koinVersion"
    implementation "io.insert-koin:koin-android:$koinVersion"
    implementation "io.insert-koin:koin-android-ext:$koinVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$loggingInterceptorVersion"

    // Moshi
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    // Timber
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Chucker
    debugImplementation "com.github.chuckerteam.chucker:library:$chuckerVersion"
    releaseImplementation "com.github.chuckerteam.chucker:library-no-op:$chuckerVersion"

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"

    // Coroutines Adapter
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutinesAdapterVersion"

    // Unit Testing
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}

static def getVersionCode() {
    def buildNumber = System.getenv('ANDROID_VERSION_CODE')

    if (buildNumber != null && buildNumber.isNumber()) {
        return buildNumber.toInteger()
    }
    return 1
}

static def getVersionName() {
    def majorNumber = 0
    def minorNumber = 0
    return majorNumber + "." + minorNumber + "." + getVersionCode()
}